name: 🚀 Release & Deploy

on:
  workflow_run:
    workflows: ["🚀 CI/CD Pipeline"]
    branches: [main, master]
    types: [completed]

permissions:
  contents: write
  packages: write
  id-token: write
  actions: read

jobs:
  # 📦 Semantic Release & NPM Publish
  release-and-publish:
    name: 🚀 Release & Publish
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    outputs:
      released: ${{ steps.release.outputs.new_release_published }}
      version: ${{ steps.release.outputs.new_release_version }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      # 🔒 Enhanced Security with OIDC
      - name: 🔐 Configure NPM Authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: 🔧 Install Dependencies
        run: npm ci --ignore-scripts

      - name: 🏗️ Build for Production
        run: npm run build

      - name: 🧪 Final Test Suite
        run: npm test
        env:
          CI: true

      - name: 📝 Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 21.0.7
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            @semantic-release/github@9.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # 📊 Package Provenance (Supply Chain Security)
      - name: 🛡️ Generate Provenance
        if: steps.release.outputs.new_release_published == 'true'
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "lib/**/*"

      - name: 📈 Post-Release Analytics
        if: steps.release.outputs.new_release_published == 'true'
        run: |
          echo "🎉 Successfully released version ${{ steps.release.outputs.new_release_version }}"
          echo "📦 Package size:" && npm pack --dry-run
          echo "🔍 Bundle analysis complete"

  # 🔔 Notification & Monitoring
  notify-success:
    name: 🔔 Success Notifications
    runs-on: ubuntu-latest
    needs: release-and-publish
    if: needs.release-and-publish.outputs.released == 'true'

    steps:
      - name: 📢 Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 *jell-utils v${{ needs.release-and-publish.outputs.version }}* released successfully!

            📦 NPM: https://www.npmjs.com/package/jell-utils
            🏷️ Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.release-and-publish.outputs.version }}

            🚀 Ready for use!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📊 Update Package Stats
        run: |
          echo "Version: ${{ needs.release-and-publish.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Released at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🎯 Release completed successfully!" >> $GITHUB_STEP_SUMMARY

  # ⚠️ Failure Handling & Rollback
  handle-failure:
    name: ⚠️ Handle Release Failure
    runs-on: ubuntu-latest
    needs: release-and-publish
    if: failure() || cancelled()

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚨 Failure Notification
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: failure
          text: |
            ❌ *jell-utils* release failed!

            🔍 Check workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            🛠️ Manual intervention may be required.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📋 Create Issue for Failed Release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Release Pipeline Failed',
              body: `## Release Failure Report
              
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              **Trigger:** ${context.eventName}
              
              ### Required Actions:
              - [ ] Review failed workflow logs
              - [ ] Check NPM token validity
              - [ ] Verify semantic-release configuration
              - [ ] Manual release if necessary
              
              **Auto-generated by GitHub Actions**`,
              labels: ['bug', 'ci/cd', 'priority-high']
            })
